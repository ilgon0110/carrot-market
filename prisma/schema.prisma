// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int           @id @default(autoincrement())
  phone           String?       @unique
  email           String?       @unique
  name            String
  avatar          String?
  createAt        DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tokens          Token[]
  products        Product[]
  fav             Fav[]
  posts           Post[]
  answers         Answer[]
  wondering       Wondering[]
  writtenReviews  Review[]      @relation(name: "writtenReviews")
  receivedReviews Review[]      @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  record          Record[]
  streams         Stream[]
  messages        Message[]
  chats           Chat[]
  seller          Chatroom[]    @relation(name: "seller")
  buyer           Chatroom[]    @relation(name: "buyer")
  Rseller         Reservation[] @relation(name: "Rseller")
  Rbuyer          Reservation[] @relation(name: "Rbuyer")
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  createAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  record      Record[]
  chats       Chat[]
}

model Post {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  createAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  answers   Answer[]
  wondering Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  answer    String   @db.MediumText
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id           Int      @id @default(autoincrement())
  createAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id          Int       @id @default(autoincrement())
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
}

model Chat {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  chat       String   @db.MediumText
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  createAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId Int
}

model Chatroom {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat[]
  seller    User     @relation(name: "seller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  Int
  buyer     User     @relation(name: "buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   Int
}

model Reservation {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      String
  Rseller   User     @relation(name: "Rseller", fields: [RsellerId], references: [id], onDelete: Cascade)
  RsellerId Int
  Rbuyer    User     @relation(name: "Rbuyer", fields: [RbuyerId], references: [id], onDelete: Cascade)
  RbuyerId  Int
}
